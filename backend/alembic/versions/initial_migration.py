

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'initial_migration'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('number')
    )
    op.create_table('periods',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('number')
    )
    op.create_table('elements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('atomic_number', sa.Integer(), nullable=False),
    sa.Column('electron_configuration', sa.String(), nullable=False),
    sa.Column('Z_eff', sa.Float(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('period_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['period_id'], ['periods.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('symbol'),
    sa.UniqueConstraint('atomic_number')
    )
    op.create_table('equations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('expression', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('light_waves',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('frequency', sa.Float(), nullable=False),
    sa.Column('wavelength', sa.Float(), nullable=False),
    sa.Column('amplitude', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('neutrons',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mass', sa.Float(), nullable=False),
    sa.Column('spin', sa.Float(), nullable=False),
    sa.Column('isotope', sa.String(), nullable=False),
    sa.Column('element_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['element_id'], ['elements.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('positrons',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mass', sa.Float(), nullable=False),
    sa.Column('charge', sa.Float(), nullable=False),
    sa.Column('element_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['element_id'], ['elements.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('element_equation',
    sa.Column('element_id', sa.Integer(), nullable=False),
    sa.Column('equation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['element_id'], ['elements.id'], ),
    sa.ForeignKeyConstraint(['equation_id'], ['equations.id'], ),
    sa.PrimaryKeyConstraint('element_id', 'equation_id')
    )
    op.create_table('equation_lightwave',
    sa.Column('equation_id', sa.Integer(), nullable=False),
    sa.Column('lightwave_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['equation_id'], ['equations.id'], ),
    sa.ForeignKeyConstraint(['lightwave_id'], ['light_waves.id'], ),
    sa.PrimaryKeyConstraint('equation_id', 'lightwave_id')
    )
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('equation_lightwave')
    op.drop_table('element_equation')
    op.drop_table('positrons')
    op.drop_table('neutrons')
    op.drop_table('light_waves')
    op.drop_table('equations')
    op.drop_table('elements')
    op.drop_table('periods')
    op.drop_table('groups')
    # ### end Alembic commands ###
